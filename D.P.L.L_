#include <stdio.h>
#include <stdlib.h>
#include <time.h>

clock_t start;
#define MAX_LIT 100

void elibereazaClauze(int*** C_ref, int** literalCount_ref, int* K_ref) {
    for (int i = 0; i < *K_ref; i++) {
        free((*C_ref)[i]);
    }
    free(*C_ref);
    free(*literalCount_ref);
    *C_ref = NULL;
    *literalCount_ref = NULL;
    *K_ref = 0;
}

int nuEsteDeja(int* clauza, int lungime, int lit) {
    for (int i = 0; i < lungime; i++) {
        if (clauza[i] == lit || clauza[i] == -lit) return 0;
    }
    return 1;
}

int verificaSatisfiabilitate(int** C, int* literalCount, int K) {
    if (K == 0) return 1;
    for (int i = 0; i < K; i++) {
        if (literalCount[i] == 0) return 0;
    }
    return 1;
}

void afisareClauze(int** C, int* literalCount, int K) {
    for (int i = 0; i < K; i++) {
        printf("Clauza %d: ", i + 1);
        for (int j = 0; j < literalCount[i]; j++) {
            printf("%d ", C[i][j]);
        }
        printf("0\n");
    }
}

void eliminaClauza(int*** C_ref, int** literalCount_ref, int* K_ref, int index) {
    int** C = *C_ref;
    int* literalCount = *literalCount_ref;
    free(C[index]);
    for (int i = index; i < *K_ref - 1; i++) {
        C[i] = C[i + 1];
        literalCount[i] = literalCount[i + 1];
    }
    (*K_ref)--;
}

int aplicaLiteralUnitar(int*** C_ref, int** literalCount_ref, int* K_ref) {
    int count = 0;
    while (1) {
        int gasit = 0;
        int un_lit = 0;
        for (int i = 0; i < *K_ref; i++) {
            if ((*literalCount_ref)[i] == 1) {
                un_lit = (*C_ref)[i][0];
                printf("Literal unitar gasit: %d\n", un_lit);
                eliminaClauza(C_ref, literalCount_ref, K_ref, i);
                gasit = 1;
                break;
            }
        }
        if (!gasit) break;

        for (int i = 0; i < *K_ref; i++) {
            for (int j = 0; j < (*literalCount_ref)[i]; j++) {
                if ((*C_ref)[i][j] == -un_lit) {
                    for (int k = j; k < (*literalCount_ref)[i] - 1; k++) {
                        (*C_ref)[i][k] = (*C_ref)[i][k + 1];
                    }
                    (*literalCount_ref)[i]--;
                    j--;
                }
            }
        }

        afisareClauze(*C_ref, *literalCount_ref, *K_ref);

        if (!verificaSatisfiabilitate(*C_ref, *literalCount_ref, *K_ref)) {
            printf("S-a generat clauza vida. NESATISFIABIL\n");
            return 0;
        }
        count++;
    }
    if (count == 0) printf("Nu exista literali unitari.\n");
    return 1;
}

int aplicaLiteralPur(int*** C_ref, int** literalCount_ref, int* K_ref) {
    int frecventa[MAX_LIT * 2 + 1] = {0};
    for (int i = 0; i < *K_ref; i++) {
        for (int j = 0; j < (*literalCount_ref)[i]; j++) {
            int lit = (*C_ref)[i][j];
            frecventa[lit + MAX_LIT] = 1;
        }
    }

    int litPuri[MAX_LIT];
    int count = 0;
    for (int i = -MAX_LIT; i <= MAX_LIT; i++) {
        if (i == 0) continue;
        if (frecventa[i + MAX_LIT] && !frecventa[-i + MAX_LIT]) {
            litPuri[count++] = i;
        }
    }

    if (count == 0) {
        printf("Nu exista literali puri.\n");
        return 1;
    }

    printf("Literalii puri sunt: ");
    for (int i = 0; i < count; i++) printf("%d ", litPuri[i]);
    printf("\n");

    for (int i = 0; i < count; i++) {
        for (int j = 0; j < *K_ref; j++) {
            for (int k = 0; k < (*literalCount_ref)[j]; k++) {
                if ((*C_ref)[j][k] == litPuri[i]) {
                    eliminaClauza(C_ref, literalCount_ref, K_ref, j);
                    j--;
                    break;
                }
            }
        }
    }

    afisareClauze(*C_ref, *literalCount_ref, *K_ref);
    return 1;
}

int nrSplituri = 0;
int literalSplitInitial = 0;

int aplicaSplit(int*** C_ref, int** literalCount_ref, int* K_ref) {
    if (*K_ref == 0) return 1;
    if (nrSplituri >= 2) {
        printf("Am incercat ambele ramuri. Formula este NESATISFIABILA\n");
        return 0;
    }

    int literalSplit = (nrSplituri == 0) ? (*C_ref)[0][0] : -literalSplitInitial;
    if (nrSplituri == 0) literalSplitInitial = literalSplit;
    nrSplituri++;

    printf("\nFacem SPLIT pe literalul %d\n", literalSplit);

    int** C1 = malloc(*K_ref * sizeof(int*));
    int* lc1 = malloc(*K_ref * sizeof(int));
    int K1 = *K_ref;

    for (int i = 0; i < K1; i++) {
        lc1[i] = (*literalCount_ref)[i];
        C1[i] = malloc(lc1[i] * sizeof(int));
        for (int j = 0; j < lc1[i]; j++) {
            C1[i][j] = (*C_ref)[i][j];
        }
    }

    C1 = realloc(C1, (K1 + 1) * sizeof(int*));
    lc1 = realloc(lc1, (K1 + 1) * sizeof(int));
    C1[K1] = malloc(sizeof(int));
    C1[K1][0] = literalSplit;
    lc1[K1] = 1;
    K1++;

    afisareClauze(C1, lc1, K1);

    if (!aplicaLiteralUnitar(&C1, &lc1, &K1)) {
        elibereazaClauze(&C1, &lc1, &K1);
        return aplicaSplit(C_ref, literalCount_ref, K_ref);
    }

    aplicaLiteralPur(&C1, &lc1, &K1);

    if (!verificaSatisfiabilitate(C1, lc1, K1)) {
        printf("Ramura cu %d este NESATISFIABILA\n", literalSplit);
        elibereazaClauze(&C1, &lc1, &K1);
        return aplicaSplit(C_ref, literalCount_ref, K_ref);
    }

    if (K1 == 0) {
        elibereazaClauze(&C1, &lc1, &K1);
        return 1;
    }

    int rezultat = aplicaSplit(&C1, &lc1, &K1);
    elibereazaClauze(&C1, &lc1, &K1);
    return rezultat;
}

int rezolva(int** C, int* literalCount, int K) {
    if (!aplicaLiteralUnitar(&C, &literalCount, &K)) return 0;
    if (K == 0) return 1;
    aplicaLiteralPur(&C, &literalCount, &K);
    if (K == 0) return 1;
    return aplicaSplit(&C, &literalCount, &K);
}

int main() {
    srand(time(NULL));
    start = clock();

    int K, maxVal;
    printf("Cate clauze vrei sa generezi? ");
    scanf("%d", &K);
    printf("Introdu numarul maxim pentru literali (valoare absoluta, >=5): ");
    scanf("%d", &maxVal);

    int** C = malloc(K * sizeof(int*));
    int* literalCount = malloc(K * sizeof(int));

    for (int i = 0; i < K; i++) {
        int n = rand() % (maxVal / 2 + 3) + 1;
        C[i] = malloc(n * sizeof(int));
        int j = 0;
        while (j < n) {
            int val = rand() % (2 * maxVal + 1) - maxVal;
            if (val == 0) continue;
            if (nuEsteDeja(C[i], j, val)) C[i][j++] = val;
        }
        literalCount[i] = n;
    }

    printf("\nClauze initiale:\n");
    afisareClauze(C, literalCount, K);

    int rezultat = rezolva(C, literalCount, K);

    elibereazaClauze(&C, &literalCount, &K);

    clock_t end = clock();
    double duration = (double)(end - start) / CLOCKS_PER_SEC;
    printf("\nRezultat final: %s\n", rezultat ? "SATISFIABIL" : "NESATISFIABIL");
    printf("Timp de executie: %.2f secunde\n", duration);

    return 0;
}
